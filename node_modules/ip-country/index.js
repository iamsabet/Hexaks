
'use strict'

const path = require('path')
const MMDBReader = require('mmdb-reader')

const defaultSettings = {
  mmdb: path.join(__dirname, 'resources/ip-country.mmdb'),
  fallbackCountry: 'US',
  exposeInfo: false,
  reader: null
}

let settings = Object.assign(Object.create(null), defaultSettings)

/**
 * Initiate the module.
 *
 * @param  {Object|undefined} options
 *
 * @return {Void}
 */

exports.init = (options) => {
  if (typeof options === 'object') {
    // Allow custom MMDb files.
    if (options.mmdb) settings.mmdb = options.mmdb

    // Use a default country when it can not be detected from the IP.
    if (options.fallbackCountry) settings.fallbackCountry = options.fallbackCountry

    // Allow to expose full lookup info in the request.
    if (options.exposeInfo) settings.exposeInfo = options.exposeInfo
  } else {
    // Set default settings.
    settings = Object.assign(Object.create(null), defaultSettings)
  }
  // Sync call, because it should be called once and
  // saved in memory for better performance.
  settings.reader = new MMDBReader(settings.mmdb)
}

/**
 * Get information about an IP.
 *
 * @param  {String} ip
 *
 * @return {Object|null}
 */

exports.lookup = ip => settings.reader && settings.reader.lookup(String(ip))

/**
 * Detect country code from an IP.
 *
 * @param  {String} ip
 *
 * @return {String}
 */

exports.country = ip => exports.getCountryFromInfo(exports.lookup(ip))

/**
 * Find country code from the lookup info.
 *
 * @param  {Object|null} info
 *
 * @return {String}
 */

exports.getCountryFromInfo = info => (info && info.country.iso_code) || settings.fallbackCountry

/**
 * Set up the module and expose lookup details to current request.
 *
 * @param  {Object|undefined} options
 *
 * @return {Function}
 */

exports.setup = (options) => {
  exports.init(options)

  return (req, res, next) => {
    let info = exports.lookup(res.locals.ip || req.ip)
    res.locals.country = exports.getCountryFromInfo(info)
    if (settings.exposeInfo) res.locals.IPInfo = info
    next()
  }
}
