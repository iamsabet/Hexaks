#!/usr/bin/env node

/**
 * Module dependencies.
 */

var core = require('../core.node');
var service = require('../service.node');
var debug = require('debug')('hexaks:Server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port1 = normalizePort(3000);
core.set('port', port1);
var port2 = normalizePort(3001);
service.set('port', port2);


/**
 * Create HTTP server.
 */

var coreServer = http.createServer(core);
var serviceServer = http.createServer(service);
var port3 = normalizePort(3002);
service.set('port', port3);
var serviceServer1 = http.createServer(service);
var port4 = normalizePort(3003);
service.set('port', port4);
var serviceServer2 = http.createServer(service);
/**
 * Listen on provided port, on all network interfaces.
 */

coreServer.listen(port1);
serviceServer.listen(port2);
serviceServer1.listen(port3);
serviceServer2.listen(port4);

coreServer.on('error', onError);
coreServer.on('listening', onListening);

serviceServer.on('error', onError);
serviceServer.on('listening', onListening);

serviceServer1.on('error', onError);
serviceServer1.on('listening', onListening);

serviceServer2.on('error', onError);
serviceServer2.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {

  var addr = this.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log("API Listening on port : " + addr.port);
}
